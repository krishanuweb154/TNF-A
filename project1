#!/user/bin/perl
#list.pl
use strict; use warnings;

my ($x, $y,$z) = (1, 2, 3);
print "x=$x y=$y z=$z\n";
($x, $y) = ($y, $x);
print "x=$x y=$y\n";

#undefined.#!/usr/bin/env perl
use strict;

my ($x, $y, $z) = (1, 2, 3, 4, 5);
print "x=$x y=$y z=$z\n";

my ($a, $b, $c) = (1, 2);
print "c=$c\n";
print length($c), "\n";
print $a + $c, "\n";

# array.pl
use strict; use warnings;
my @animals = ('tiger', 'horse', 'squirrel');
print "1st animal in array is: $animals[0]\n";
print "2nd animal in array is: $animals[1]\n";
print "Entire animals array contains: @animals\n";

print "@animals[0]\n"; #bad

push @animals, "fox"; # the array is now longer
my $length = @animals;
print "The array now contains $length elements\n";push @animals, "fox"; # the array is now longer
push @animals, "fox"; # the array is now longer
my $length = @animals;
print "The array now contains $length elements\n";

$length = @animals;
($length) = @animals;

my ($first, $second,) = @animals;
print "First two animals: $first $second\n";
my @animls2 = @animals;
@animals = (); #assign @animals an empty list -> destroys contents
print "Animals array now contains: @animals\n";


my $value = pop(@array);
pop(@array);

@animals = ('tiger', 'horse', 'squirrel'); # needed because @animals was emptied
print "Animal at array position 1.2 is $animals[1.2]\n";
print "Animal at array position 1.7 is $animals[1.7]\n";
print "Animal at array position -1 is $animals[-1]\n";
print "array length = ", scalar(@animals), "\n";

# stringarray.pl
use strict; use warnings;

my @gene_names = qw(unc-10 cyc-1 act-1 let-7 dyf-2);
my $joined_string = join(", ", @gene_names);
print "$joined_string\n";

my $dna = "aaaaGAATTCttttttGAATTCggggggg";
my $EcoRI = "GAATTC";
my @digest = split($EcoRI, $dna);
print "@digest\n";
my @dna = split("", $dna);
print "@dna\n";

# sorting.pl
use strict; use warnings;

my @list = qw( c b a C B A a b c 3 2 1); # an unsorted list
my @sorted_list = sort @list;
print "default: @sorted_list\n";
my @list = sort @list;
@sorted_list = sort {$a <=> $b} @list;
print "numeric: @sorted_list\n";

@list = qw (2 34 -1000 1.6 8 121 73.2 0);
@sorted_list = sort {$b <=> $a} @list;
print "reversed numeric: @sorted_list\n";
@sorted_list = sort {$a <=> $b or uc($a) cmp uc($b)} @list;
print "combined: @sorted_list\n";
